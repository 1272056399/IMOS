package shortRead;


public class LocalAligner {
	public int MATCH;
	public int MISMATCH;
	public int GAP;
	public int counter;
//	public int shift;
	public int NegativeInf;
//	public int k;
	public String mSeqA;
	public String mSeqB;
	public String mAlignmentSeqA;
	public String mAlignmentSeqB;
	public int mScore; // totalMatch = 0
	public int totalMismatch = 0;
	public int totalGap = 0;
	//GAPDeletion
	public int totalGapr = 0;
	//GAP Insertion
	public int totalGapfa = 0;
	public String cigar;
	public String realCigar;
	private int[][] mD;
	
	public static void main(String args []){
//		Test_SMALL();
////		la.Print();
		String A = "ggacctgctcctgatgggtctgacagacagacgcccacttagctcccaaggggtgagggccccagtctacctgagagcaatccctagcctccagcagctgcttccccagcaacctcaaatgggcaacaagcagcactcaggctggagggtcgagggaaacagaacctccgggagcggtaccggaggtgccggttaggccccaggaaggcttcgcggcacaggctccatgaaggaagccacctgcacacgggcagggggagccccgtgtgcaaccagcctatcatcagaaaaccagccttgcaccgagttccctggagcagcacccggcggtgccggctgacgtgcggggtaggaggtggagccggtaacttgtcccgcctgggagggtcctggggcgtcgtggcgaccctacctcagcaggacattgggagttgatgtacgttctcgcacttcgtttttgcagaaaaccgccttcgtaaaggccgtgtgtccacccggaggatgccgttcggacgcacctccaagcatgctctgtcgttggagaacaggccccctgccagggacgctagaagccgggattcgggggggggcgtggaccccgccccaccaaccagcctgtgccggaggtccagggatgactcactacaccagcaaggtgcgtgtgaccatttgttcagtataggagcccggtgcatgcccggatgaacgctgttgtcggctttcgtcataccttgatacttcatccgctcagaccctgtggaagatggggtagaggtcctgggagggcgccccttcagagtacacacaaccgctcacctcagcagctttctagaggctccctgtgaccactgctggcgatccccaccctgacatctgggatggggtcaggagagaggggcacgtgctgtgaccctagccatctcctcttgtgctttggggacgcgctgccctgcccaacctacctgggccagtgcgcgaagggcctccttccgccgccggcacctaatggcggctgtgttaagcatatgggccgccacgcccactggctgttgtttcactacaaagagaaaacacaggcctctagcagttcctcacaggacaagggacagaggcctgcggctacgttttaagggggcctgactgtcgcttatgagggagcacctggcgttctgcctcgtgcagaaatctacgccccacccaaatcattgtgccgcaaagacagtgatccggccactctgaccccggatctgcctcctctgcaaaacgcgggctggtcttgtggcccatgcagggggatcatccttgcgtcccaccaacctgccctgggggaacaagtcaccctgccctccagacaccattcactcgacggtcataaacaactcaaacagttgttctccttgaagtcctatccactgctggtttccacttggagtccttatgcagcacacccccaggggcctccctgagggaagggggtgggccctgggagggtgaagcggcggcgcgcagggccaccctgatggcctcctgcggctgcaggcagtgggggcagaaaggaacagtcagcagcagcctgagacctcgaaaacctacaacggctctgaggaacccccctcacctggtctcacccatcaaaattcggactggagccgggaaaccttgcgtgaaagggcaaaccaagaaacggactcaggacggccgaacagttggtgggctccgcgaggaatgggacagccagtgaaagctggcccaaaatggggccagccgaggccatcgggctgagtatgctctactcgtttggctcaaaccttttcatcctccttaatacgttagtctcccgcaaactcctgattctcttgtcccaggactggggctccccgtagggccctgcgtagcctgttcacgcaggacagcggtcgatcaaattttccttcttcaggaatccacccccatgcgagggaggcagagggggctgtgggtcggtgtactgggttcggcgccccagcctgccaatgcccctaggcccagactggggctgccactgggtgaggcgtcatgaaggccggctgtcctgcccagctttcccgcttttggataccagactcggccgactgcattgccgtcttggctgacttccctccacgcctcttgattttcgcctccgagatcatttttactgacttccgagtgaaggctctacgattacaggactcagagaggaggcgtttggccaccgcccttgacggccgcgaggggcggggcaggaggggaatgaaattcactgccggagacgcaagggcggcatctgttgacccgggcgggcagaaggccttctagtgctcctgtggtacgcggccacccatcaacagagccatggacacaacggcacccctccacgagaccacgagcacaccgccctcccagagccacgagcacccaccggcaccccccagagccatgcagcacaccggcacccccagaccatgagaacagccgccacgcgcttccggatgctcggccctgggctgctggggtgagacgactggctcatgctggacccctttcccaaaatggcaggagtcctctgaggaaccctgggaactgctgtggccaatggttcccaaggaggcggaccccgggaaagaccggcggtgatgggcgcccctgctgcgacatagaaggagctggacagaaagacaaccgggaaggggccagcagcaccccgaggaatctgccttcccgcctctacccctgtggggaggggggtggaagggccaccttcgtccctcactatttttaggcaggaacaacattatcaagttctcctcgagatcccctggcttgagcagcactgtctggctgccgcagacttctcctgggtcaacggtcactgcagaggttgccagattctgattctctcaccctgcaatgtcgccgggaacacctgataacctttccgagggtctagcatgcacgccctcatgcacccacctactgctggccaatagcaccccccccccaggagccgatctcttccacagcctccagcggccaggggttgtgagccccagtcggtccagggcggggtcgtggaactgttacctccttcacggtgcccgtcattccacccctaagcttctttcgtagcactcctcgtcgcacgtttcgcgtgactgcggattgttttctaagtaaaagaagcgcctgttcctttgtttttgttttttgttctttgagacaatgctctccgttggcgaggctggcgtacagtatggcacgtctctcggctccgcacttcctcctgaccagatctaagcgattcttttcctcgcccagcctctccgagaagcttgggaccacagggcccactcaccatgacctggctaatttttgtatctttcagtttagagaccgggtcttttaccacgttggcgcaggctggtctcacaacttctgaccttccaggtgaatccgacccgcctcggcctccccaactgtgctgggagtctaaggcgtgtgtgagccacttgcctggccaaccgtttgtgtctttaatcgtgtatgtctgacacgggcagtgactttcactctttcacgccaaaggtgcaagaaagcatgcttctccgcagcccctcccctccccgcactcctgccagcataggtgctcgcctccagggctcacccggctgccacgatggcttggatttgagggtctagcgcgtgagctcctctgctaggaaggccggcagactcggggtcctccggcgggcagctaactcctgagagccaggagcccgagcctatccaccttatcaccgggtggtaggaggtcggatcactagcctgtccatactgtgacccctcatccagcctccagccacacagttcttggatcttaatgtctcccgcttccactcgcaccccactgccaaactcgagcctgctattcttcagattgacccctgcatctaatagataaagaggggctgggaatgtgagctgtagtcaccagctcttatggaagctagcagatgggaggaacgctgacccagagagtccgaagaccacacaggcaacgcatggtcgagaccctgtctctagaatttacataaaaaattagccagggcgtgtatcccattcccttaaagtcacacgctagtcagaggaagtgaggtgggagaatcacctcgacacatggagaaggcgtcaaactcgcagtgcgagcagtgatcacaccactagcaactccaagccacgggtggcaagagaagaccctgtctcaaaaaaaccaaactacgctgggcatcggtggctctgcctgtatatccctagcactctgggaggccaagtgcggatggatcacctgggtcaaggacgttcaacaccaagctctggcccaaagtccttgaaccccgtcttcccactataaactcacaaaaattatagccgtgtgcgtggtgggtggcgcctataattccagctatttggaaggctgaggcagagaatcatgcttgagacccagggagcgggggtatgccagtagccgagatcggccaccgttgaactccagccggctgaccagagcaagacatccttctcaaaggagaaaaaaacaaaaacgaacaaacaaataaagacacaaatgacacccaaggccaaaatcgaaaatgcaagggacccgttggcaggtgcctgcactctgagacccagctgctcaatggtaacagatgaggacacgtgttgaactgcctcgcagggcctatacaagtaaaggagatgcaggagccattcccagaaagccatgggcttggcagctgagcatcaagaagagaagatgacaatccttataaggaacaggctagagcagtggctcacacctgaacatacccagcactttggaagctgagagacgggcagaaggaacactacctgaggcccagcgagattatgagaccacgctgaccaaatggtggaacgcccgtctcctataaaaagcaattatagggctgggcgcagctggtctcacacctggtaatctcagcacgtttgaaggccacaggctgcgtggatcatattgagcggtcaagcgagttcaagccatgcctggcaacagggtgaaatcccctaagtctttactaaactatctaaaatattacctgcggcagtagtgatgttgtgttctgaatccagctacttcgggaggctagaggcaagggagtaaatcgcttatggcctaggaggcagagggttgtgttgatgcccaaaatcgtacactcagctccagcctggcaatggagagtcaagactcctgctttcaaaaaaagcaaacacagagcacaactaacaaatcagctggggtgtggtggtcagcgcacttagttcccgagtataccgtagggaggctgagggggcagggagaatcgggctggaggttgcagtggagccaacaggtccgccaccgcaccagcctggatgacaggcaggactccaattctcagtaaaataaaataaaaataaaataataatagccagacatacaccacagtttccacacaggctccacccagaagggctaccgctgggagctccaggagcgctgatcccatagctggttgtgcatcgttgccgggggctgttgaagaataggcgggcgggctggcgtggaagtttgggcagggtgtgagcctctagcactgcgcatgccactctccaggaggagccactgatgctggtcctggggaccacgcttcaacgctgcacagaacgctgcatggtctctataggcagcaacccagagcctggagacccgcacctgcccctgcgtccctcctcattagtgcatcagagcagtatcctcaccttccatcacgagctcaccctgcccccaaacgtcccagccctgaagcatccgtctgccaagctccctgtccgtgaggaaacactggcctggaatcaaacatgtcagccaagacaggtaagcaaggcaaggggccgcaacgcggtgagctacgcctgtaatcccaggactttggaagctgaggcgggcagggactcacttgaaggctcaggagtttcaaggccagcttcggccaacatggcgaaacctcttcactataaaaaattactaacaaaattagatggggccgtggtgggttgcgctgcctgtaagcctgccagcactcgaggaggcctggcagggtaatcacctgtgaccagccgtgggacggtggaggttgacagtgagccgaggatcgcaccaactgctctcctagcctgggtctgagggaaaaaacaaagccaagcaaaaaaaactcccgtatttttcgcttctggcctcctgggagcacttctgagttcttcttagaccttccgggcctcgtcacgaagttcttttatacctttcttatcaatttcttttgtttttggcgtaattcttgatttagacattatctagcaagccgggacactagaagccttttctgtttccagaagaatatagatttggactagagaagaaatagtacaagaaaataaaatataaagaacatattggaacctagatgaaatagcccctaacagttagggactcaggggatttgtttaaatgttgctcttttcggttgatatacattttaatgatgatcaagctatctcttttataattaatcagtaaaaaacaacagaaacagctagcgtgataaaagtgtggacctatatccagacaaacagatattattcagtcagttagaaaaaaaatggctgtccgccactcttagcgaggctgaggagggaggatcttgcttgaggtcatgtagttttaagaccagcgctggactaacacacagccctattaaaaaacaggcaggcgccgcgtgtggttcacgagcctgaatcccagtacttagtgggaggctgagcggggcaaggagtcaccctgaggcaggtaggagttgcggcagtaccagctggccaaaatggtgaaacctcatcctactatacaatgtcgaaagttagctggcatggtgagattgtgtctttagtcccgctcctccgtagaggcttgagccaccgagaattgcttggcaagcccaaggaggaagaggcttcagtgacgccagatatgcccactacagctccagtctgggtgccatgaaagcgagacgtcatctacataaaataaaataaaataatgttaaaaaaacaaagcagagaaattgcttcaagctgtgataaagcacaacagagggaaccttaaatgatattggcactacgtagcaagaagccaatctgaaaaggctacataactgtctcagtccaacttagacgcgtctggaaaaggcggaaaacaggtgacagtaaaaagtcagtgcatatgccaagagtggcgctttgtgtaggaagaggggtgacggatgagtcaggggggaaaatagcaaaaatcgttagggcagtgaaacatactctatatatactgtaatcacagagaacgtacaccaccaagagggaacccgaaggtaaaccatggcatttattatgaataatgagttctacatcctgtcaattgtgacgatgctccacactccaattgagagtgaagatatagaaaactgtgtgcagatgggaaggaggagggcatggccaactctattcggacatttctgttggatttcctgtaaaaccgtaaaatgccaaaagataagccttgtggaaaaatggaaaccaaggccgggcgccactgggcacctgccccgtaatctcagcactttccgggggcccttgggtgggtggatcacttgaggtgcagagtccagaccagccatgaccacatattgaaaccccccgctctcaacaaaaatacaaaattagctgcgatggtggtgggtgcctgtaatgcctaggcacctcggaaggtctgaggcaggagaatcacttgaacgccaggtagctgcgaaggttgcagtgagccatagatggtggtgccaagctaacctccatgcctgggctgatggaactgagagctccgatgcttcaaaaaaaaaaaaaaaaaagaggctggcgaacagtctgggtcatatctgtacatacctcagcacttttggggagacgaggtgggcggcatcagctttgatgccatggagatccgagacaaagctctggccaatcatggtgaaaccttgtgtgatctctactacaaaatacaagaagttagccaggtgtggcggtgccctgcctagtacccagctactgaggcagaacggcaggagaacttgactggaactcgaggaggatggggaggttgcaggtgtagtcggttattctcgcccctgcactccagcctgggcgacaggagatgattgaccctgtattcaacaaaacaaacagcagaaatcagttttaatgaactggatcacttacaataaatcccaatcagggcggaagggccgcctgtggatcaaatttctcacagctgtgttgggtataccagctaccaggtgggatcccccatccctggctcctgtcaagctaaagagaaagctgcactccagcctgtgtgctcagggcccgtggcagatccacagccaccgttggttcccagtactcagaagtgctgaggtggaaggaatcgctttaagcgcaccaaggagttcaatgctgacagtagagccgtgataggtgccactgcaccccaagcctgggccacagagtgagacccgtatctttaaaaaaaaaaaacaacgcccagtgcctgctagccccccaggacaggtcggccaggcctcctgttccagcaggctgcagtcaccattcagtgccaccctggctcagccttctcacaggggaaacccaaggttctagtaaaatcacatccatggaccactccaaccttatcgcagccctcacagagactcttgggcttacaaaccagggtgtgagtgtggttggcggagggcactagacaaaaagggaaaagagtcacggtcctgtcccacaccccgagggccccaggacaggatggagaggtaggtagctcacctccaaggagcgcagctgagctgagcttggcgcagagagaggaggagacagatgtacgacgctgctccgaatgtttctaggtctgggggaaggggcagtcagcgtatttgggcttctgtcctcacgatgctgcgacaccaaacccatcaagccacagttgaagatgtagagaccaggaagaaactgaggttctggtttgtgacagggtgcgcttcgtgtaccaatgacaaatgggcatctttctagaaaaggtaaacatgctatgtctgggtgagttgtatctcacgggcagaggtcaaagggaaaagtgagagttcagtctaaatacgaggggtccatccaagcattagagccaactataagggactttcctgaccaggccacctatatcccccttactacaagtaactcaagagcaggcaagtgtttctaggggaccagtgaaggccaggcaccacccgggggctcttcttctgaaagccccgggacgtatgaagggccaccaccgaggatggtaaccgagccaccgtctacgccccacaccctccctcctgccaatggactgaatttttacgggccccctgtgctcatgccctggcccggagcgactcctagaaggatcactcaccagtggcaggtctccgcccggccgggcgcatcttatagggaccctatgggtgtaggatgtggctgagaaaagaaattggtcgttcactggcgcacggcatcgctattggggagagaagagaagatccattctaacaagaggttgacctgagaaggtaagcagaccactacacaaaacagcaggggtcccacctgccactcactgccagttttttttcttttttagcatggagtctcaggcagagtcgcactgctgcgattcattcccactgcaacctatggcccttcctgggttccaaggattcctgcctgcaggtctcccgagtagctggaagttgacaggctatgcgcactatcacatccgcagctaattatttgttattttaaggtacgagaagcggtaattgccatgttggccagagctggctctcattgcgacctccaggtgaatcgtccaccacctgcccccggttttccgaagtgctagggtattacaggcatgagcccactgcaccgtggcctcactggaccaatgttgtatcttatgcctgattgcatgccgggtcctctgtatactctcccaaagtctgagaagcagccgaagctggtggaaagagaaaaatgctgtgtcttgtacctctcagggcctacatcatctctcgtgctcctgaaactagggggaaaacggacaggtcccaggaaagtgccaaccctgggggggaaagaaggctaatatgtacaattattaatcccttagctctgaaagtatggcactctagcttctatgctacgtggccaaccacgtccttcctcttgcgagcccaccccttctgccagcccgtccacatcaagaggagagaactgatttttgagacacaaaccttcataaatgtgttcaccgggggcaacttggcataaacctaacaagattcctcctcaatgggttaagcgttgacagagtaatatgggagagtcgctgactgggcaaagactggctagcgatctcatttaaaaggctactttgctggcacttggggcggtgtgctctcgccagataatgcccatcacgttgggccgaggctaagtgtgggagagtcacccggtcagtagttctcgagaacagctggcaacatggtgaaatcgccgtctctaccaaaaattacaaaaattatgccgtggactgtggtggcacacacctgagtcacacacagctgtacgtaattgcttaaaccccgggaggcggaagtgcaggtgagtacccgagatcttgcccttaagtcgcttgcaaggcctgagctggtggctcagctgtaatcccgatacttggagaggcctgaggcaggaaggaaccgtttgagcatcaggagtttgaagaaactcagcctgggcaacatagctagaccctgcctactagataaactattgggggaaaaacaaaagtctcatgatgcaggtcctgtttcagctcggcccctgtcacccagcacagaaccctgtggcgtgttgatgtcaaaagaccaatggtaccagtcttctccacaattatccacattcggccgttttagtctcgtgttctcttcctcctactctcgagaaccctatgcacatcccaaacttaccagagtgcctaccttctctgcttatttaaccttgaggtataactttttctcttttttttgagcggagtctcccatctggttgcccaggctggcgtagaagtggcaatgagatctcgagctgctactgcattctccgccgccgggttagtgtcttcgtctgccgcaggcctcccaagtagattgggatctacaggagcgcgccaccatgcccggctaatcggcttttttgtattttgttagtacagatggggttttcagtaggagaagggattttcaccatgctgaggccagtgggtctcgaactcctgacctcaggatgatccatccatgaggctgaggcaaggagaaaatcgacttgacgccgaggcagaaggaggctgaaacgttctgcagtgagcgcgagaatcgcgcctgcactgccagacgtgggcggtacagaggaaactctgtctcaaaaaaaaaaaaaaaagagcaaaagaaagcaaaaacagaaggagcagggaggcaatatgaagtactactttctagtgcggccttcaccctccttgactgccctctgccactgtggacccccaagaacgtgctagggcgtacgaaccacctctcgcacatcgcaagatgaacggttagacgaacgagacaagaaaatgctgctcggatagagtaacttggcatttaaaccgcgagctgtgaatttcacgtattttttgccttgcccctctactttgttccgacgggcgccgccgcccggctacccagtaactcctccgtatgaacggctggaggactgatcacgagggccgaagggtgatcagcatcccacccaggctcctcgcgcatccgccgcccccccccggtcaagctacggtcaccccgccctcatggccacgctctgagccccctcgtcctggtcctcctgctacacgcacagatctaacccgcaagctctctctaaggaagcgcaagcaagggtccgcgaatgggccaagggtctgagaagaaagtccttggtgccgaaggcccagagacaccctacagcatcgccgctgccagcgcgccaccgccgtctctacccgtggacagccggcaccagccactccgccagggccgccccgccatgttggagagatctgtgtgatcccttctccgaccggcgccgcgccggcttggcgtcatccgccgcttcggcctagtggccgcgcaagctgagaaaatgccgctccatgagcggagtttgggttagggagagccctcctgatttcgggtccgttcatagggcggaggcattaaagaagggagggaatgccttaggagcttgacctctgtttagggcagttgtcttggaaggacggggcccgtgactgtatgtggccgcggagggcatggcactcctgggagggtcagatctgttgattccggcggactacgaggggtagggccaggggcgtgtatgtccggtcactttgcgggatcgcgctacagaagcgtcgccgggcgctggtggcagtggtacaggacacagtggatccaccaacaacaagaggattcgatggatcgttgattgaccggcggagcaagctcctagagtaacttgtcttggctgccccctagcaatgacctgattgatctggagcaataggctgtgagcgcaagtgagtcgctccgaggacagcgaaaggagccaactcttatgtgcggcgcttgggaagacgcctgttggttttgacaccccaataaaagaggaaagctgagagcgggctgactggggtccggccacttcgattcagtgttgagtatccctgacactctgactgagacgctcatgcggcctttgtcaattccagcaccccagatgctattttccatctccgaatgaaatgcgcgccaccaggtggcggtattaaaccatggccatgccaatcctagtatgaggaggtaggggttggtccccttgggagagctaattgtatgttctgttgcgtgttgtctattggatcctttttttttgttatagacgccagagcttgctctggatcacccaggactctgaggcagctgtcgtaatttagctcactgcaggcctccaattcccaagcttcagcgtccttcttcctagcctgaagtcaaactggggatttacgggcgtgagctaccgcacccggtgtacttactttataccttcacggctgtgatcagggtttatgggagtatcgattatttcagaagcggaggcagcttggcccgccggagagcaatgcattcctggcttctcggccgtgacatagatcttgttgttctccaatctcaggacgcggctccccctcaaggtgggggtacaaggattgagggcttctcactctggctttgtacggtgcatgtcttgcatgccgaagaggagcgaatacctagttaagcgtgttggtgtacagctaggtgtgttgctagaataaggtctgggctagaaatatggatcttagttgtggttgaaagtacgtagtttggccgggcgggtggctgcatgacactataatcccagcactttgggacactgaggcgggaggactctctccagcccaagagtttggagaccatgtcctgggcaacactagtgaagacctcttctttacaagcaaatacaaaacattaggcctgggcgtggtagcatgtgcacttgtagtcccagctactcaggaggctgagatgggaggcatcgttgaggcccgggaagttaaggctagtagtgagcctgtggtcgtgtgccactacactacactacagtacactacactacctgggcaacagagagagaccttgtgtcaaaaaaaaagaagaagaaagaaagagagagagagaaaggaaagaaagaaactacagcattgacacctcagaggcagtgtgtcataataagcatgtcacaagacctcaaagataaagtggagatagaagactcctttaaggccaggtccgtggcttcagtcctattatcccagcaactcaggagcctgaggcaggaaagcatcatttgagcccaggagttacagaccagtctgggcaacataacgagaccctcatctctacaaaaataaaagaaattaagccaagcatggtctgtctctcgcctggaattccagctccttaggaggctgaggtgggaggatctcttgagcccattagttgacgctgcagtgtagctatgactcacccactgcactccaccctgggtgacagcatgagacctccatctcttttttgttgttttgagacagatctcactctgtcgcccaggcctggagtgcagggcacgatcgttcggctcactgcaagctccgcctcccgaggttcacaccattctcctgccttagcctcccgagtagctgggactagcatgtgcctgccacacaccacagctaatttttttgtatttttagtagagacagggtttcaccatgttagccaggatggagctcgatttcctgacactcgtgatccgctttgcctcgcctcccaaagtgctggcgattacaggcgtgagccaccaacatccggcgttgtttttttttgagcactgtgtagttttactcttgttgcgcaggctggagtgcaatggcgcgatcttggctcaccgcagcctcttgcttcccaggttcaagtgattctcctgcctcagcctcccaagcagctgggattacagggcatcgtgccaccacaacccagctaattttgtgttcttagtgagagacggggtttcttccatattggtcaagctgtgttcgaactcctgaactcaggtgatcctcccacctcagcctcacaaaatgctgggatttacaggcatagagccaccatgccccctcgaagacctccattctaaaaaacaatttttttgttgttgtcgtgttttgagactgagtctcagtctgtcacccaggctggagtgcagtggcgtgatctcggctcactgcaagctccacctcccaggttcatggcatttccgctgcctcagcctcccgcgagtagctgggactacaggctgcccgccaccatacccggataatttttgtatttttcagtcagagacggggttctcaccatcttagggctcgtgctagtctcgagtcctgacctcgtgatctcacctgccttggcctcccaaattgcctgggatcaaggcgtgtgccactgcgctcagcactgtgggacggccgagatggggcaaattcatgaggtcaggggatcaagaccatcctggcttaacatggctgatacccccatctctactaaaaatacgaaaaaattagccgggcgtggtggcaagtgcctgtagtcccaactactttgggagctgaggcaggagaattcgtcttggacccaagaggtggagatgttacagtgagctgagatcacaccactgcactccagccctgggcgaccagcagcaagacccatcaaaaaaagaaaataacaaaggaagactaaatctggaggacacttggagaaggcagatggaaacagcagaggcgatgcctgcacagttcgaggcaaggcaaacggacaggaaatcgtagccaccgccattgcattttgcaatatggagggtcattggtgagcataagcaagaggggtgtttgggtgagtggtgggcctggggaagccagatttcaaggtgagtggaggatggttttactagaggcatgctggggccagcttgcactgactcgcaagagccagccggcacatcttcaagaattcaatagcctcttgttaaacatggccaatatgtaaacaattatcgtataaactatacgtgcaaatagattatattagaacaaaagtaataatgcaagaattcatcacttcctttatgctgctacatgttaactactatctgtgcctcttcgagggattcttgtttttgttttgagacagtctcgactctattcgcccagataggagtgcagtggcaccagcacggctctactgttagcctcgaccttccaggctcaagtgatcctcctcacctcagcctcccgagtagctgggactacagacatgcaccatcacgcccgagctgatttttgtattttttttgtagagacagggtctctcgtgacgttgacgggctgatctcgaactcctgggctcaagcgagtcctccccaccttgacctcccaaagtgctagggatgacccagcacaagctcacagagcctaggctactttttaaaattttttgtagagacagctgggtgcaggtggctcacacctataatcccagtcactttgggaaggccgaggtgggtggatcacatttaggccaggagtttcgatgaccagcccagccaatatggtgaataccccgtctctattacaaaataccaaaaatgtagcccaagatgtggtggtgcatgcctgtaatcccagctactcagaatggggcggctgaggcagcaggaattgcttgaacctgggaggcagaggttgcatgatgccaagattgcacgcactgcattctagcctgagtgacacatgcgagactctgtctcaaataagtaaataaataatcttttttgtagagacagagtcttgctatcgtatgcactaggctatgtctcaaaaccccatgggcatcactcgatcctcccaccacggcctcccaaaagtgctggggttacatggcatgagccactgacacctggcttatcttggggttatttactatatgatgtctgcgtgctggaaatcactactattatgtgagtcactgcattgtgtacagttctgtttgatgatgccatcatttgtagcttgaaatcacctacaagcagatgacagccacaagtggtgggagtatttacaccacaggaattggcagacattccaagtcagggagctctttaggttgggtttgtttctactggtgagccagttattaaacatttcaccagcaagcggtggttgagaatactgggacacagaacacagactcttcccaggaattttcatctgtggcacagaaggtgaatgatggcagctggcaaggaacatatgggaaggagtcgagagtgctttgttttccccaacttgtttattttgcacaaatttcaaagctacaaaaaaaaaattgcaagaatagtatacgaggctgggcacggtgtctcacacctggtgaatctctgcactttgggtaggccgagatgcggatcatctgtggtcaggagttcgagaccagtctagccaacatggtgaaactgcgtctctacaaacaaaaaaaacaaaacaaacaaaacaaagaacaaaaattagccgggcatggggcgcacgtctgtaacccagccactcgggaggctgaggcaagaaagactcacttgtagcccaggaggtggccgaggttgcacgtgacccaggatcctagccactgctcatccagcctgcggtgacagagtgagaactccatctcaaaaaaattttaaaaatattggctaggcgcagtggctcacgcctgtaagatcccagcactttgggaggccgaggcgggcggatcacgaggtcaggagatcaagaccatcctggctaacacggtgaaacccatctctactaaaaatacaaaaattagccaggcatggtggcggcgccatgtggtcccagctctcgggaggctgaaggctagagagaatgacgggtgaacccgggaggccagagtctgcagtgatgccaagatcgcgccactgcactccagcctgggcacagagcaagactctggtctcagaacaaaaaagaaaaaaaaagatcaaatcgtttagccaaccataaattagtttaaatttatacaacccgaccccagccaataaaaaagggtacaaacaacaaaacttgcatcaaaaataagaggcttcggtgcccctttgttcaagtatactcataatcaactggcctcaaaaaaacaccccctgcacaaaaataaatactttgctaaaaattccttcgttcaagtggttgcaatttccttaaaattttaagcgttattcctaacatttgccactcctagagaattcctaatgccgctgactgatcttaccaggatggctccagtgatggggagcggctgtagaatatcagatgagctttgctgcctcctgctcactgcctgcctgctccctcctgctctgcgggcccagtctcctaacagccacagacaggtaccagtccatggccacagatgatgcagacccctgtcttaaacaaaaacaaaaaaccaaagcacactataatgtgagatcctactctctttagcaaaatttttgtttttgttgtcgttgacacggagcctcattctgttgcccaggctggagtgcaggtggcgcgatctcggcttacgtgcaacctccttctcccgggttcccagcgattctccttggcctcagcctcccgagtaactgggattataggcaaccaccaccacgcctggctaatttgttgtcgatttttcagtagagatggggtttcccccatgttggtcaggctggtcttgaactcctgacctttggg";
		String B = "accgcaccctgccacttggctcattttaaatgtttttgtagagacgggatcttgctatgtttcccaggctagtcttgaatgcttgggctcaagcaatctcccgccttgggctgctgggattgaaagcataggccaccgtgcccagacctaaccaaaattattttaagattggagggaaaaaaaaggcccagtaaaattggcagctttgtgatctctcacaggcccaggggacacccccaaccagccatctcttagacaccagcccagagaaggattctccctaacaaagtttacagtctgggagcaaaggactggcgggtgacccggtgtccagcctgagagcccagatgtgtcacatgctgaggaatggaaaggggcagggggggatgtcaggctctcggagggtgagacgtgaggattcccccaccgggagcccatgtcctgcctgttgggagctaccccaacggagccaccgaagtggaacttctccatggtgattttttaggccttaaaaaaaaaaaaagaaaaagaaaggaagtactcacagcttcatagcaccagtctttgagaatgtcaagctctccagaaatcatggcctaaaaaggaagggaaaataagcaacagaacgagagtgggcttttcaggcagcaggcgaggtcctgggaacattctccagtggtgcggggtggggagtttcctcagacacccccggctgccacctgtggggcgcgggtggagctgtggcactgggtgtcccccccaggcccgtccctgctggtgtcagtgcctggctctggcctaggcacaggcggagggcggcctgcgggcgaccacccaggaggcaccccacagggggacccccctggaacctggtggaggaagagaaaggtggctggggacccagctttcagcctggtcaggaatccaagccagggagatgaggacccaactccggctcccgcagtgagcccatgtcctctgtccccccaggggaccacatttcggactgcaaggcccaccatgggaccggctgcctcctaactgctgggggcagcgagagggaggggtgggctgcagggggcgtgcctgggctgggagctgcttccacaggatcctggagcctgggccggatccgatgagggggagggaggtgcctggagcggggagaagagcgggaaggagccggatgctggtggtgaaagctgtgagcggcagggggcgggtggccagaacacttggcacccatcacccatcccggaaggcactgcggtgctcaggctgctgttttggggcatggcgcccatccgcaccacctcccagccctgcccgaagtggcgggaaggatacgggaaactggaggaggaagaggacgttgggcggaggccggcggggccaacgatggagagtcccatgaagggccttccagaggcctggcccgactgggccgaaggtgtccaggctcctcctgcatcctgggggctgcagagaggcagaggcagcagggaagacaagaggccaccaacctcagggagaggcttatagggggcaggcgtgcagcatgaccttgagcaagataccctcatctataagcccaacaagggtctggttgccagggacagcaccgtgagggaacctcacggctgcagctctgggtcagacgtggcctggggccagctctgatgtctgaagacagacgcccacttctcccaaggggtgaggggctccaggcacctgagacaatccctagcctccagcagctgctcccagcaacctcaaaggaacaacagcctcaggcaggaggagtgagggaaacagacctggaggtaccggaggtgccggtaaggcccaggaagggcttcgggcacagctcatggggcagctgcagccgggcaggagcccgtgtgcaaccagcctcctcagaaaacagcctcggcagcagagttccctggcagcacccagggtgccggctgcggcgggggaggtggtggagccaggacctgccgcctgggaggggtcctgggggtgtggcacccacctccaggacattggggatgatgtcgttctcgcactgtttcagaaaccggtccttgtcaaaggccgggtccacccggaggatctccgtgagcacctccgacatctctgtcttggagaacaggccccctgcagggagcagagccgggagttcggggggaaggccggggaccccgccccaccaccagcctgcgaggtccagggatgactcactcacccagcaagtcggtgaccttgtccgtaagggcccgggatgcccggatgaacgcgttgtcgctttcgtcatacttcatcttcatctcgaagaaccctgtggaagatggggtaggtgctggagaaggggccccttccagaaacacaaccctccctcacagcttctagaggctccctgtgacccctgcgggatccaccctgacacgggtggggtcagggaggggacggctgtggacctgcatcctcatctgtgcttggggaccgctgcctgcccacctacctggccaggcgcagaggcccctcagctgcggccctaatggggctgtgtaagttatgggccgccaccccactggctgttgctttcactacaaaggaaacacaggcctctagcagtcctcacaggacaagggacaggggcctgcggctcgtttcggggccctgactgtgcttatgagggagcacctggcttctggcggcagaatctacagccccaccatcatgtgaccgcaaagaagtgaccggcccactctgaccccgatctcctcctctgcaaaacggggctgtcttgtgcccaatgcagggggatcaccttgcggtccaccaactgcccgggacacagtcacctgccctccaagacaccttcactcacggttaaacaccacgttgttctccttgaagtccttccactgctggtaccacttggagtccttgtgcagcacgacccccagggcctccctggggaagagggtgggccctggggtgagcggcggcgccagggccaccctgtgccctcctgcggctgcaggcagggggcagtacaggacagcaggcagctgagacctcaaacctaggggctctgaggaccccgccctcacctctcaccctcaaattcgagggagccgggaaccttgggcagaaggcaaactcaagaaacggactcaggagggaaccattggtgggctcccgaaatggacagcagtgaaagctgcccaaaatgggggcagcgagggccacgggctggtacctactcgtttggctcaaacactttctcctccttgaacttatctcccgcaaactccgttctcttccggagtcgctggggcctccggtagggcccggtctgtcccaggacgctgtcgtcaatttccttcttcacggactccaccccctgcgagggaggcacagcggggctggggtgggtgtctgggttcggccgccccaggctgcatgccctagcccaggactgggctcacctgggagagggctctgaaggccgctgtcctgcccagcttctccccgcctttggataccgactcggccgactgcttggccgtcttggctgcttcctccacgccctccttgattttccggccgagatcacttttactgacttcgtgaaggctctactgagacagacacagagagggggcgttggcaccggccctggcggccggggggcggggcaggaggaatgaattcctgccggagagaagggcggatctggttccccgaggccggcagaggccttctgtgctcctgtggtacgcggcacccccagagccatgagcacaacggcacccccagagccacgagcacaccgccacccccagagccacgagcacaccggcacccccagagccatgagcacaccggcacccccagagccatgagcacaccgccacggcttccgggatgctggccctgggctctgggtgagacgctggctctgctggcccctttccaaaatgggcaggagtcctctggagacccgggaactgcctggcagcaaggattcccaaggaggggaccccggggaaagaacggcggtgagggcgccccatgctgcgcaaagctggacagaacagacaaccgaggagagccgcagcaccccaggaatcctgcctcccgcctctaccctcgggagggggtggaagcggcccctctcctcctatttttaggcaggaaaaacattttcatgttctcctcgagtcctggctagcagcacttactgctgccgactccctgggtcaacggtcatgcaaggttgccagtctgacctcaccctgcatgtgccgggaactcctgaaaccttcccgagggtggcagcacgccccatgccacccactgctgccaagccacccccacccaggagccgactcttcctccagcctccagcggccaggggactttgatggccccagcggctccaggcgggcgtggaactgttacctccttcacggtgcccgtcagcaccccaagcttcttccgtagcacctcgctcgtccgcacggtttctgactcgatggttttctaggtaaagagcgctgtgtccttttttttttttttttttttgagacaatgtctccgttgccgaggctggagtacagtggcacgctctcggctcactgcaacttcctcctgccagattcaagcgattttcctgccccagcctcccgagtagctgggactacagggcccaccaccatgcctggctaatttttgtattttcagtagagacagggttttaccacgttggccaggctggtctcaaacttctgacctcaagtgatccacccgcctcggcctcccaaagtgctgggattataggtgtgagccactgtgcctggccaaccgttgtgtctttaagtctgtatgttctgacacggcagtgacatttctcttacagccaaaggtccaagaagcatcttctccgcagcccctccctccccgcacctgccagcatgtgctgcctccagggcccccggctgcccacatggcttggattgagggtctcagcagcggtgagctccttgctcagaaggccggcagactcgggtccccgcttggcagctacctcctgagaacaggaggcccagccttcacctttcaccgggtggtaggaggtggccttgcctgtcatcactgtgcccctcatccagcctccagccaccacagcttggtcttatgtctcccgctccatccaccccactccaaactcagcctgctatgtcttcagatgacccctgcattaatgataaagaggggctgggcatgtgagctgtagtcccagctctttgggaagctgagatgggaggatcgcttgagcccagagagttcgagaccagcacaggcaacatggcgagaccctgtctctagaaatataaaaaaattagccaggcgtggtatcccatgcctttagtcacagctactcaggaggctgaggtgggagaatcacctgaacatgggaaggtcaaaactgcagtgagctgtgatcacaccactgcactccagccagggtgacagagcaagaccctgtctcaaaaaaccaaactaggctgggcacggtggctcatgcctgtaatcccagcactctgggaggccaaggcggatggatcacctgaggtcaggagttcaacaccagcctggccaaagtgatgaaaccccgtctccactaaaaatacaaaaattagcctggcgtggtggtgggcgcctataattccagctatttggaaggctgaggcaggagaatcgcttgaacccagggaggcggaggttgcagtgagccgagatcgcaccgttgcactccagcctggctgacagagcaagactccatctcaaaggagaaaaacaaaaaacgaacaaacaaaaaaacacaaatgacaccaaaccaaaccaaaatgcaagggacccgtggcaggtgcctgcatctctgaggctcagctgctcattggtaaaatggggacactgtaactgcctcgcagggcccttacaaataaaggaatgcagagccattcccagaagccagggcttggcagctgctcaagaagagaagtgacaattaataatgacaggctgggagcagtggctcacacctgtaatcccagcactttgggaagctgagacgggcagatcacttgaggccaggagtttgagaccagcctggccaacatggtgaaaccccgtctctataaaaagatatatagggctgggcgcactggctcacacctgtaatctcagcactttggaaggccaaggcaggtggatcatttgaggtcaggagttcaaggccagcctggccaacatggtgaaaccctgtctttactaaaaatacaaaaattagctgggcagtagtggtgtgtgtctgtaatcccagctactcgggaggctgaggcaggagaatcgcttgagcctaggaggcagaggttgtgttgagccaaaatcgtaccactgcactccagcctgggcaatggagtaagactctgcttcaaaaaacaacaacaacaacaacaacaaatcagctgggtgtggtggcgagcgcctgtaatcccagctatccgggaggctgaggcaggagaatcaggagctggaggttgcagtgagccaaggtcacgccactgcactccagcctggatgacagagcaagactccatctcataaaataaaataaaataaaataaaataccagcaccatcacccagtttccaccaggctccactcagagggctacagctgggagctctcaggagcgctgcatcccatagctggtgtgcatgcgttgcctgggggcctgtgaagatgcgggcgctggcctggcagtttgggagggtgtgagcctctgcactgctcatccactcccaggaggagccactgctgctggtctggggaccacgcttcaagctgcacagaacgctgcatggtctcatggcagaacccagaggcctggagacccgcacctgtcccctggctccctctcattagtgcatcagagcagtgacctcacttcctcacgagccaccctgcccccaaccgtccagccctgagctcctctggctgtccctgtcctggagaaaccctggccctggaaacaaacatgtcaaccaagaaaggtaagaagcaaaggggcccaacgcggtggctcacgcctgtaatcccagcactttggaaggctgaggcgggcggatcacttgaggtcaggagttcgagaccagcctggccaacatggtgaaacctcttcactactaaaaatacaaaaattagctgggcgtggtggtgcgcgcctgtaagcccagctactcaggaggctgaggcaggggaatcacttgaacctgggaggtggaggttgcagtgagccgagatcgcaccactactctccagcctgggtgagggaaaaaaaagcagcaaagaaactcacgtatttccttctggcctcctggagcacgtctgattcttctagccttctggcctcgtcacggaatttttttatactttctttcatttctttgtttttggctaattcttgtttgacattatctagcaagccggacagaaagccttttctgtttccagaagaatatgatttggactagaaagaatgtacaagaaaaaaaatttaaagaacatagtagaacatagaatgaaatgccccacagagggactcagggatttttttaaatgttctcttttcggttgatatacatttaatgatgattagctatctcttttataataatcataaaaaacaaagaaacagcaggtgataaaagtgtggtatatccagacaacagaatattattcagtgttgaaaaaaaaatgagctctcagccactttaggaggctgaggagggaggattgcttgaggtcatgagttttaagaccaacctgggcaacacagcaccctatttaaaaaacaggctgggcgcggtggttcacgcctgtaatcccagtactttgggaggctgaggcgggcagatcacctgaggtcaggagttcgagaccagcctggccaaaatggtgaaacctcatctctactaaaaatgcaaaagttagctgcgcatggtggtgtgtgcctttagtcccagctcctcagaaggctgaggcacaagaattgcttgaacccaggaggaagaggctgcagtgagccaagattatgccacagcactccagtctgggtgacagagcgagactccatctcaaataaaataaaataaaataatttaaaaaacaagcaagaaatatgctctcaagctgtgaaaagacacagaggaaccttaaatgtatattgcactaagtgaaagaagccaatctgaaaaggctacatactgtctgattccaactatagaccgttctggaaaaggcaaaactaaggggacagtaaaagatcagtggttgccaggggtttggtaggaagagggtgagatgagtaggggggaacacagaaaaatgttagggcagtgaaactactcttatgatactgtaatcacagagaatgtacaccaccaagagggaaccggaaggtaaaccatgcatttattaataataatgtatcaacatcctgtcaattgtgacagatgctccacactaatgcaggacgtgaagaatagaaaactgtgtgccagatgggagaggaggggcatggcaactctttggacattctgttggatttttctgtaaacctaaaactgctcaaaagataaagccttgtgaaagcaaaacaaggccgggcgcagtggctcctgcctgtaatctcagcactttgggaggccaaggtgggtggatcacttgaggtcaggagttccagaccagcctgaccaacatagtgaaacccccgtctctactaaaaatacaaaaattagctgggcgtggtggtgggtgcctgtaatgccagctactcaggaggctgaggcaggagaatcacttgaacccaggagccggaggttgcagtgagccaagattgtgccactgcactccagcctgggtgatggaatgagactccatctcaaaaaaaaaaaaaaaaaagcaggctggacacagtggctcatatctgtaatcctagcactttgggagaccgaggtgggcggatcacttgaggccaggagtccgagacaagcctggccaacatggtgaaaccttgtctctactaaaaatacaaaaattagccaggtgtggcggcgcctgcctgtagtcccagctactgaggcagaggcaggagaactgcttgaactcgggaggtggaggttgcagtgagcggtatctcgcccctgcactccagcctgggcgacagagtgagactctgtttcaaaaaaacaacagagaaacagtttaatgaatgatcatacaataatccaatcaggcggaaggggccgcctgtggtcaacttttccacagctgtgttgggtataccagctccaggtgggatccccctccctggctcctgtcaagctacaagagaaagctgcatccagcctggtgctcaggccccgtggagtcacacacctgtggtcccagctactcagaaggctgaggtgggaggatcgcttaagcccaggagttcaaggctgcagtgagccgtgatagtgccactgcaccccagcctgggccacagagtgagaccctatcttaaaaaaaaaaaaaagcccagtgctgctccccaggacaggtggccaggcctcctgtcagcaggctgcagtcccattcagatgccaccctggccagcctttctccaggggaaacccaggttctaagtaaaatcatccaggaccacacaaccttatcgcagccctaccagagactcttgggctacaaaccatgggagtgagtgtgtggcgggggactagacaagaaagggaaagagtcacaggtcctgtcccacacccacgatggccccaggacaggactggagaggtaggtagctgcctccaaggaggcagctgagctgaggctctgggcgcagagagagagggagacagaatgtacgcgctgcccgaatgtacaggtctggggaagggagtcaggttttgggcttctgtcctcacgatgctgcgacaccaacagaagcacagttgaagaggaatgaccaggagaaactgaggtctggttgtgacaaggtgactctgtaccaatgatcaaagggctatcttctagaaaaggaaacagctatgcttggtgaggtacccacgggcagaggtcacagggaagtagaattcagttcaatacaggggtctcttccaagcattagagccaacataaagggctattctgacagcaccttatccccttacgacatcaagcaagaggcaggcaagtgtttctgggaccgagaaggccaggcacactgggatctgtcattctgaaagccccggacacagaaggcccaccaccgagatggtacgagccacctctacagccccacccctccctcctgccaatgggatctgaattttcgggcctcccctgtgtctgctggcccgagcatcctgagtcactcaccagtggcagctctccgcccggccggcgcatctgataggtcgacccatggggtaggttgtggctggaaagaaattggattccactgccgaggcatctctaattggggggagagaagagaaagatccattctaacaagaggttgactgagaagtaagcagaccacacacaaaacagcagggtcacctgcaactcactggccattttttttttttttttgagacggagtctcaggctagagtgcagtgctgcgatctcagctccctgcaacctatgcctcctgggttcaagcgattctcctgcctcagtctcccgagtagctggaattacaggtatgcgccatcacatccggctaatatttgtatttttaggagagaagcggttttgccatgttggccaggctggtctcgaactgctgacctcaggtgatccacccctcccccggttttccaaagtgctgggattacaggcatgagccactgcacctggcctcactggccaatttgtatcttatgcctgatgcatgccgggcactctgtaatcttcccaaagtctgagaagcaagcagaagctggtggaaagagaaaatgctgtgtctgtacctccagggcctacatctatcctcgtgcccctgaaactgggggaaaacggacaggtcccaggaaatgccaacccatggggggaagaaggctaaatgtacaatttaatcccttagtctgaaagtaggcactctaagcttctatgctagtggcaagcagtcttctcttgcgagcccaccccatttctgccagcctccaaagatgagagaactggatttttcagacacaaacatcgataatgtgttgccccagggacaactctggaataaacctacaatgtcctcctcaagggttaagctataaacagagtaatttaggggagtcgctctgggcaaagactgggctgatctcatgtaaaaggcacttgctggctgggcgcggtggctcacgccagtaatcccaacacgttgggaggctgaggtgggaggatcacccggtcaggagttcgagatcagcctggccaacatggtgaaatcccgtctctaccaaaaatacaaaaattagccgggcgtggtggcacacacctgtagtcccacacacctgtagtattgcttaaacccgggaggtggagggtgcagtgagccgagatcttgccttaagttctgtgcaggcactgagctggtggctcatgcctgtaatcccgatactttgggaggctgaggcggaaggatcgtttgagctcaggagtttgagaccagcctgggcaacatagctagaccctgcctccataaaaaattgggggaaaaaaaaaaagctctgtgcaggtcctgttcagctcggcaccctgtcacccagcacagaacctggcgtgttgatgtcaaaagaccaggtacaacttctccaccatttccacatttcctgggccgtttttctctctgttctctgcctcctacctctgagaaccctatgcaacatcccaaacttacacaggtgcctactatctcctgtatttacttgaggataacttttttttttttttttgagacggagtctccctctgttgcccaggctggagtaaagtggcaggatctcggctcactgcaatctccgcctgccgggttcaagtgattctcctgcctcagcctcccaagtagttgggattacaggagcgcgccaccatgcccggctaatttttttgtatttttagtacagatggggttttagtagagatgggatttcaccatgtgggccagtggatctcgaactcctgacctcaggtgatccacctgaggctgaggcaggagaatcgcttgaacccggaggcagaaggaggcagaagttgcagtgagccgagatcgcgccattgcactccagactgggcgacaagagcgaaactctgtctcaaaaaaaaaaaaaaaagagaaaaaagaaaaaacgaagagcacgagcaatatgaagtactactttctgagtgcgccttacacgtcttgactgccactgccctgtggacccaagagcctgctagggcgcgaaccacctctcgcacatccacaatgaacgttagaagaaacgagacaagaaatgctctcggtagagaacttggcatttaaccgcgagctgtgaatttcacgtttttttgccttcccctctacttttttccacgggacgccgccgccccggctaccattctctctcctgtatacgtggagtctgatcagagggcgaagggtgatcagctccctcccaggtcccgcgcatcgccgccccctgcccggtaagctcggtccccgccctcaggccacgctctgtgccccctgtcctggcctctgctacccaaagatctaaccccaagctttctaaggagcccaagcaagggtcgcgaaggccaagggtctgagaagaaagccttggtggccgaaggcccagaagacccctaagctcgccctgccagcgccgcaccgccgctcacccgtggacagcggcaccagccactccgcagggccgccgccgccatgttggagaatcgtgtgaccttctcgcggcgcggcccggttgcgtcatccgccgcttcggcctagagccgcgcaagcctgagaaaagccgctccaggagcggggtttcgggtagggagagccctccgattgggtccgtcatagggcggggcattaaaagggtagggaatgcctagagagcttgacctctgatagggcagtgttttggaaggacggggcccgtgactggatgtggcccgggggagggcactcctgggagggtcagatctgtgattgggcgcgactacgagggggcggagcccaggggcgtgtattccgtcacttgcggtgattcggctacagaacgcgccgggcgctggtggcaggtggtacaggcacgtggatccaccgaccacaaggacggattcgattggattctgattgaccggcggaccagctccagagtaattgtctatggctgcccctgcaatgactgattgattgacaatggctgagagaccagcaagtgagtcgctccgagaaagcgaaggagcccactcttgtgcggcgctttgggaagacgcctgttggttttgaccccgaataagaagaggaagctgagagcgggctgactgtggtccagtcctacttcgattcagtgtgaactgacactctgatctgaagacgctcaggcctttgtcatttcagcaccccagatgctattttccattcgaagaatgccgccaccaggtggcggtattttaacatggccatgcaatccgggtatgaggaggagggttggtcccctgggagagctaatgtatgttgctgttgctgtttgtcttattggatccttttttttttttatagagccagaggcttgctctgtcacccaggctagagtgcagtgtcgtaatctagctcactgcagcctccaattcccaagctcaagcgatcctcctgcctcagcctctgagtcactgggattacaggcgtgagctaccgcacccggtctttttgcattactaacctgtgatatgggtttatgggacttcattatttcaaagggaggcagcttggccccggagagcatgcattcctggcttctgcgatggatagacttgtgttctccatctcaggagctccccctcaaggtgggggtaagagatgagggcttccactctggctttgtacgagatgtcttgatgccaagaggagcaaactagttaagcggttggtgtacacaggtgtgttgctaagaataaggtctgggctagaaatatggattcttagttgtggttgaaagtacggagtttggccgggcgcggtggctcatgcctataatcccagcactttgggacactgaggcgggaggatctctccagcccaagagtttgagaccagcctgggcaacatagtgaagacctcttctttacaacaaatacaaaacattagcttggcgtggtagcatgtgcttgtagtcccagctactcaggaggctgagatgggaggatcgttgaggcccgggaagttaaggctgtagtgagccgtggtcgtgccactacactacactacagtacactacactacctgggcaacagagagagaccttgtgtcaaaaaaaaagaagaagaaagaaagagagagagagaaaggaaagaaagaaaactacagcattggacactcagaggcagtgtgtcatataagcatgtcaaagacccaaagataaagtggagatagaagactcctttaagccaggatccgtggctcagtcctattatcccagcaactcaggagcctgaggcaggagcatcatttgagcccaggagttacagaccagtctgggcaacataacgagaccctatctctacaaaaataaaaaaataagccaagcatggtgtctctcgcctggaattccagctacttaggaggctgaggtgggaggatctcttgagcccattagttagacgctgcagtgagctatgatcacccactgcactccaccctgggtgacagcatgagacctccatctctttttttgttgttttgagacagagtctcactctgtcgcccaggctggagtgcagtggcacgatcttggctcactgcaagctccgcctcccaggttcacaccattctcctgccttagcctcccgagtagctgggactacatgtgcctgccaccacacccagctaattttttgtatttttagtagagacagggtttcaccatgttagccaggatggactcgatttcctgacctcgtgatccgcttgcctcggcctcccaaagtgctgggattacaggcgtgagccaccacacccggcctttttttttttgagatggagttttactcttgttgcgcaggctggagtgcaatggcgcgatcttggctcaccgcagcctctgcttcccaggttcaagtgattctcctgcctcagcctcccaagtagctgggattacaggcatgtgccaccacacccagctaattttgtgttcttagtagagacggggtttctccatattggtcaggctggtctcgaactcctgaacctcaggtgatcctcccacctcagcctcccaaaatgctgggattacaggcatgagccaccatgccccctcgagacctccatctctaaaaaacaattttttgttgttgtcgttgttttgagactgagtctcagtctgtcacccaggctggagtgcagtggcgtgatctcggctcactgcaagctccacctcccaggttcatggcattctcctgcctcagcctcccgagtagctgggactacaggcgcccgccaccatacccggataatttttgtatttttagtagagacggggtttcaccatcttggccgtgctagtctcgagtcctgacctcgtgatccacctgccttggcctcccaaattgctgggattacaggcgtgtgccactgcgctcagcactgtgggaggccgagatgggcaaatcatgaggtcaggggatcaagaccatcctggctaacatggtgaacccccatctctactaaaaatacaaaaaattagccgggcgtggtggcaagtgcctgtagtcccaactacttgggaagctgaggcaggagaatcgcttggacccaagaggtggaggttacagtgagctgagatcacaccactgcactccagcctgggcgacagagcaagactccatcaaaaaaaaaaaaaaaaaggaagacaatctggaggaacttggagaaggcagatggaaacagcagaggcgagtgctgcacagttcaggcaaggcaaggacagaaatgtagccaccgccattgcattttgcaatatggaggtcattggtgagataagcaagaggggttttgggtgagtggtgggcctgggagccagatttcagtgagtggagatggttttacagaggcatgctggggccagcttgcactgactcgcaagagccagccggcacatcttcaagaattcaaagcctcttgttaaacatggccaatatgtaaacaattaattgtataaacttacgatcaaatagattatattagaacaaaagtaataatgcaaaattcatcacttcctaattatgctgctacatgttactactatctgtgctcttgagggtttttgtttttgttttgagacagtctcactctatcgcccagataggagtgcagtggcaccagcacggctcactgtagcctcgaccttccaggctcaagtgatcctcccacctcagcctcccgagtagctgggactacagacatgcaccatcacgcccagctgatttttgtatttttttgtagagacagggtctctctacgttgcacgggctgatctcgaactcctgggctcaagcgatcctcccaccttgacctcccaaagtgctgggatgaccagcacaagccacagagcctggctactttttaaaattttttgtagagacaggctgggtgcagtggctcacacctataatcccagcactttgggaggccgaggtgggtggatcactttaggccaggagtttgagaccagcccagccaatatggtgaaaccccgtctctattaaaaatacaaaaattagccagatgtggtggtgcatgcctgtaatcccagctactcagaagggaggctgaggcagcagaattgcttgaacctgggaggcagaggttgcagtgagccaagattgcaccactgcattctagcctgagtgacacagcgagactctgtctcaaataagtaaataaataatctttttgtagagacagagtcttgctatgttgcctaggctggtctcaaacccctgggctcactcgatcctcccacctcggcctcccaaagtgctggggttacaggcatgagccactgcacctggcttatcttggggttatttacatatatgatgtctgcgtgctggaaatactatattatgtgagtcactgcattgtgtaccagttctgtttgatgatgccatctttgtagcttgaaatcacctacaagcagatcagccacaagtggtgggagtatttacaccacaggaattggcagacattccaagtcaggagctctttggttggtttgtttctctggtgagccagttattaaacatttcaccagcacagcggtggttgagaatactgggacacagaacacagactcttcccaggaatattcactgtgcacagaaggtgaaatgatggcagctggaagaacatatgggaaggagcgagagtgctttgttttccccaactttttattttgcaaaatttcaaagctacaaaaaaaaaattgcaagaatagtatacgaggctgggcacggtggctcacacctgtaatctctgcactttgggaggccgagatgggcggatcatctgtggtcaggagttcgagaccagtctagccaacatggtgaaactgcgtctctacaaacaaaacaaaacaaaacaaaaaaacaaaaacaaaaattagccgggcatggtggcgcacgtctgtaacccagccactcgggaggctgaggcagaagactcacttgagcccaggaggtggaggttgcagtgacccaggatcctgccactgctctccagcctgggtgacagagtgagactccatctcaaaaaaattttaaaaatattggctaggcgcagtggctcacgcctgtaatcccagcactttgggaggccgaggcgggcggatcacgaggtcaggagatcaagaccatcctggctaacacggtgaaaccccatctctactaaaaatacaaaaattagccaggcatggtggcaggcgcctgtggtcccagctactcgggaggctgaggcaggagaatggcgtgaacccgggaggcagagcttgcagtgagccaagatcgcgccactgcactccagcctgggcaacagagcaagactctgtctcagaaaaaaaaaaaaaaaaagatcaaatgtttagccaaccaaaattagtttaaattatacaacccgaccccagccaataaaaaagggtacaaaaacaaaacttgcatcaaaaataaaggctctcgtgcccctttgttcaagtatactcataacaactggccaaaaaaacacccccctgcacaaaaataaattactttgctaaaaattcttcgttcaagtgttcaatttccttaaaattttaagcgttattcctaacagtttgcactcctatgagaatctaatgccgctgctgatcttacaggaggctccagtgatggggagcggctgtaaatacagatgaagctttgctgcctgcctgctcactgcctgcctgctcacctcctgctctgcggcccagttcctaacaggccacagacaggtaccagtctatggcccagatgatgcagacccctgtcttaaacaaaaacaaaaaaccaaagcacacttaatgtgagatctactctcttagcaaaatttttgtttttgttgtcgttgacacggagcctcattctgttgcccaggctggagtgcagtggcgcgatctcggcttactgcaacctccttctcccgggttccagcgattctcctgcctcagcctcccgagtaactgggattataggcaaccaccaccacgcctggctaatttttgtatttttagtagagatggggtttccccatgttggtcaggctggtcttgaactcctgaccttgggtgatccacccacctcggcctcccaaagtgctggggttacaggcgtgagccaccgtgcccggctactgtgatgtgattattatacatcgtatgcctgtatcaacatatgtcctgtagaccataagtatatacacctactacgtacccactaaaattaaaaataggcagggcacggtggctcacacctgtaatcccagtactttgggaggattgcttgaacccaggagttcgagaatagcctgggcaacacagtgaaactccgtctctacaaaaaaaaaacacaaaaaaattagccaggtgtggtagagagtggctgttggtcccagctactcaggaggctgaggtgggaggattgcttgagcccaggagtgagaggctgcagtgattgcaccactgcactccaggtaactaaagtacaatggggccgggtgtggtggcccttgcctgtaatcccagcactttgggaggctaaggtgggtggatcgcttgacgtcaggagttcaaggccagcctggccaacatggttaaaacgtgtctctactaaaaatacaaaaattagccgggtgtggtggcgggtgtccgtagtcccagctactcgggaggctgagtcaggagaatcacttgaacctggaaagcggaggttgcagtaagcttagatcgcaccactgcactccagcctcagcaacagagagagactccgtctcaaaaaacaaaaatagaggccaggcacagtggctcacgcctgtaatcccagcacgttgggaggctgaggcgggtggatcaagaggtcaggagatcaagaccatcgtggctaacacggtgaaaccccgtctttactaaaaacacaaaaaattagctgggcgtagtggcgggcacctgtagtcccagctactcgggaggctgaggcaggagaatggcatgaacccgggaggcggagcttgcagtgagccaagatcgcaccactgcactccagcctgggtaacagagtgagactctgtctcaaataaaaataaataagtaaaataaaagtataaataaataaataaatacattacaatgaggttattagggtatgagccctaatccagaaaaaccggtgtccttataagaagcagagattgggccgggtgcggtggctcacgtctgcaatcccagcactttgggaggctgaggcgggcgtatcactgaggttgggagttcgagaccagcctgagcaacacggagaaaccctgtctctactaaaaatacaaaattagctgggcgtggtggctcacgcctgtaatcccagctactcaggagtctgaggcaggagaattgcttgaactcaggaggcggaggttgcagtgagctgagatcgtgccattgcactccagcctgggtaacaagaggaaaactccatctcaaaaacaaacaaaacaaacaaatgaacaaacgaagcagagatcagccgggtgcggtggctcaaacttgtaatcccagcactttgggaggctgaggtgggcggatcacaaggtcaggagtacaagaccagcctggccaacatagtgaaaccccatctctactaaaagtacaaaaattagccgggcgtggtggcgggcgcctgtagtcccagctattctggaggctgaggcaggagaatcacttgaacctgggatatgtaggttgcagtgagccaagatcacgccactgcactccagctcgggtgacagagtgagactttgtcccctctgcaaaaaaggaagtggagattaggacacagatacacacagagggatgactgtgggaagacacgagaagacggccatctgcaagccaaggagagaggcctcagaagaaagagaccctgctgtcaccttgatctcaaacttccagcctccaggactgtgaggcaatgcatttctactacttaagccacgcggtctgggtgctctgttacctgcaggccgagcaaaccaatgcaggtgcccctcagcctcttccctctggctcccagcccccacccactcgcattggctgttgcgtgcaggcctctgccatctgtctgccttctgtctggcttcctttccacttctgtaccttctacccagcggactcctccatctccggttctccttctcgaggtataattatagctgctggcactagtgcctgtctcctctgtgccaaagtgtgttcctggccatcagaggccgtatcttattaacaccaacccggtaaccctgggaggcaggagctatcattagctctcttataccaaagcgatgcagcacccaaggcttccagagaggaagggggatgcccagggccacgcagctagcatgtaaaagataatctgtcacctgggcatggtggcacatgcctgtggtcccagctactcaggaagctgaagtgggaggagtgattgagcccaggcgttcgaggctacagtgggctgtgattgcaccatcg";
		A = A.substring(0,A.length()/100);
//		String A = "atcg";
//		String B = "aaaaaaaaaaaaatcgggggggggggg";
		LocalAligner la = new LocalAligner(A, B, -8, -6, 2, (int) (0.1 * B.length()), 2 * B.length());
		int a = la.run();
//		la.DQ(100);
//		la.Full();
		System.out.println(a);
	
	}
	
	
//	public static void main(String args []){
//		Test_SMALL();
////		la.Print();
//		
//	}
//	public static void Test_Large(){
//		String A = "TGTAGAAGTTTACTCCAATGTAAATTATCTTACCTCAATCAAGTGTGACAACCATGTAAAGCCTTTATCACATTCTTTACATTTCTAGAATTTCTCACCAGTATAATTTATTTTATGTTTGAAAAAGTTTGAGGTGTTGTCAAAATCACAAAAAAAAAAAAAAA";
//		String B = "TGTAGAAGTTTACTCCAATGTAAATTATCTTACCTACAATCAAGTGTGACAACCATGTAAAGCCTTTATCACATTCTTTACATTTCTAGAATTTCTCACCAGTATAATTTATTTTATGTTTGAAAAAGTTTGAGGTGTTGTCAAAATCAC";
//		LocalAligner la = new LocalAligner(A, B, -8, -6, 2, (int)(0.1*B.length()) , 2*B.length() );
//		la.process();
//		System.out.println("realcigar = "+la.realCigar);
//		System.out.println("NM = "+la.totalMismatch);
//		System.out.println("Gaps = " + la.totalGap);
//		System.out.println("Gaps = " + la.totalGapfa +" "+la.totalGapr);
//		System.out.println("MD = "+la.cigar);
////		la.Print();
//		
//	}
//	public static void Test_SMALL(){
//		String A = "TAATCGAAG";
//		String B = "TATATCGAG";
//		LocalAligner la = new LocalAligner(A, B, -3, -2, 2, (int)(0.1*B.length()) , 2*B.length() );
//		la.process();
//		System.out.println("realcigar = "+la.realCigar);
//		System.out.println("NM = "+la.totalMismatch);
//		System.out.println("Gaps = " + la.totalGap);
//		System.out.println("Gaps = " + la.totalGapfa +" "+la.totalGapr);
//		System.out.println("MD = "+la.cigar);
////		la.Print();
//		
//	}
	// K is editDistance*read.size()
	// seqA = Read
	// seqB = Ref
	public LocalAligner(String seqA, String seqB, int gapPen, int misPen, int matchPen, int shift, int k) {
//                for(int i =0 ; i <= (int)(seqA.length()*0.1); i++) seqA+="A";
		this.MATCH = matchPen;
		this.GAP = gapPen;
		this.counter = 0;
		this.MISMATCH = misPen;
//		this.shift = shift;
		this.NegativeInf = seqA.length() * GAP;
		// add 2xShift to K
//		this.k = k + 2 * shift;
		this.mSeqA = seqA.toUpperCase();
		this.mSeqB = seqB.toUpperCase();
		this.mAlignmentSeqA="";
		this.mAlignmentSeqB="";
		

	}
//
//	public final void processDamoon() {
//		int scoreDiag = 0;
//		int scoreLeft = 0;
//		int scoreUp = 0;
//		int end = this.mSeqB.length();
//		for (int i = 1; i <= this.mSeqA.length(); i++) {
//			if (((this.k / 2) + i) < (this.mSeqB.length()))
//				end = (this.k / 2) + i;
//			for (int j = Math.max(1, i - (this.k / 2)); j <= end; j++) {
////				if (i < this.mSeqA.length() - shift + 1) {
//					scoreDiag = mD[i-1][j-1] + weight(i, j);
//					scoreLeft = mD[i][j-1] + GAP;
//					scoreUp = mD[i-1][j] + GAP;
//					mD[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
////				} else {
////					scoreDiag = mD[i-1][j-1] + MISMATCH;
////					scoreLeft = mD[i][j-1] + GAP - 10 * MATCH;
////					scoreUp = mD[i-1][j] + GAP + 10 * MATCH;
////					mD[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
////				}
//			}
//			if (1 < (i - (this.k / 2))) {
//				mD[i][i - (this.k / 2) - 1] = this.NegativeInf;
//			}
//			if (((this.k / 2) + i) < (this.mSeqB.length())) {
//				mD[i][(this.k / 2) + i + 1] = this.NegativeInf;
//			}
//		}
////		for(int i =0 ; i <= mSeqA.length() ; i++){
////			for(int j = 0 ; j <= mSeqB.length() ; j++){
////				System.out.print(mD[i][j]+"\t");
////			}
////			System.out.println();
////		}
//		backtrack();
//		this.totalGap=this.totalGapfa+this.totalGapr;
//	}
//	
	public final int run() {
		
		int Gap = 0;
		int Gapfa = 0;
		int Gapr = 0;
		int Score = 0;
		int Mismatch = 0;
		cigar = "";
		realCigar = "";
		String A = mSeqA;//.substring(0,(int)(mSeqA.length()*0.2));
		String B = mSeqB;//.substring(0,(int)(mSeqB.length()*0.2));
		int maxGap = (int)(A.length()*0.3)+1;
		StringBuffer mAlA = new StringBuffer();
		StringBuffer mAlB = new StringBuffer();
		int diff = 0;
		//first
		for(int i = 0 ; i < 1 ; i++){
    		mAlignmentSeqA = "";
	        mAlignmentSeqB = "";
	        totalGapfa = 0;
	        totalGapr = 0;
	        totalGap = 0;
	        totalMismatch = 0;
	        mScore = 0;
	        diff = processF(A,B,maxGap);
	        Gap+=totalGap;
	        Score+=mScore;
	        Mismatch+=totalMismatch;
	        Gapfa += totalGapfa;
	        Gapr += totalGapr;
	        mAlA.append(mAlignmentSeqA);
	        mAlB.append(mAlignmentSeqB);//.substring(mAlignmentSeqA.length());
		}
		
		totalGap = Gap;
		mScore = Score;
		totalMismatch = Mismatch;
		totalGapfa = Gapfa;
		totalGapr = Gapr;
//		int diff = produceCigar(mAlB.toString(), mAlA.toString());
		return diff;
	}
	
	public final int processF(String mSeqA, String mSeqB , int MG) {
		mD = new int[mSeqA.length() + 1][mSeqB.length() + 1];
		int scoreDiag = 0;
		int scoreLeft = 0;
		int scoreUp = 0;
		int maxGap = (int)(0.2*mSeqA.length())+1;
		if(MG>0) maxGap = MG;
//		if(MG>0) maxGap*=4;
//		int I = 0;
//		int J = maxGap + 1;
//		while(J<=mSeqB.length() && I<=mSeqA.length()){
//			mD[I][J]=NegativeInf;
//			J++;
//			I++;
//		}
//		J=0;
//		I=maxGap + 1;
//		while(J<=mSeqB.length() && I<=mSeqA.length()){
//			mD[I][J]=NegativeInf;
//			J++;
//			I++;
//		}
		for(int i = 1 ; i <= mSeqA.length() ; i++){
			int s = 1;
			int e = mSeqB.length();
			for(int j = s ; j <= e ; j++){
//				scoreDiag = mD[i-1][j-1] + weight(i, j);
				int weight = ((mSeqA.charAt(i - 1) == mSeqB.charAt(j - 1)) ? MATCH:MISMATCH);
				scoreDiag = mD[i-1][j-1] + weight;
				scoreLeft = mD[i][j-1] + GAP;
				scoreUp = mD[i-1][j] + GAP;
				mD[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
//				System.out.print(mD[i][j]+"\t");
			}
//			System.out.println();
		}
		int diff = backtrackF(maxGap,mSeqA,mSeqB);
		this.totalGap=this.totalGapfa+this.totalGapr;
		return diff;
	}
	
	public final int backtrackF(int maxGap, String mSeqA, String mSeqB) {

		int i = mSeqA.length();// - shift;
		int max = i * GAP;
		int index = 0;
//		int flag = 0;
//		for(int z = 0 ; z <= mSeqA.length() ; z++){
		int s = 0;
		int e = mSeqB.length();
		for(int k = s ; k <= e ; k++){
//		for (int k = shift; k <= this.mSeqB.length(); k++) {
			if (mD[i][k] > max) {
				max = mD[i][k];
				index = k;
			}
//			if (mD[z][k] > max) {
//				max = mD[z][k];
//				index = k;
//				i = z;
//			}
		}
		int j = index;
//		i=mSeqA.length();
//		j=i;
//		j=mSeqB.length();
		this.mScore = mD[i][j];
		this.cigar = "";
		this.realCigar = "";
		while (i > 0 && j > 0) {
//			if (mD[i][j]==0 || mD[i][j]==NegativeInf) break;
			int weight = ((mSeqA.charAt(i - 1) == mSeqB.charAt(j - 1)) ? MATCH:MISMATCH);
			if (mD[i][j] == mD[i - 1][j] + GAP) {
				mAlignmentSeqA += mSeqA.charAt(i-1);
				mAlignmentSeqB += "-";
				totalGapfa++;
				i--;
				continue;
			} else if (mD[i][j] == mD[i - 1][j - 1] + weight) // MATCH-MISMATCH
			{
				mAlignmentSeqA += mSeqA.charAt(i-1);
				mAlignmentSeqB += mSeqB.charAt(j-1);
				if (weight == MISMATCH)
					totalMismatch++;
				i--;
				j--;
				continue;
			} else {
				mAlignmentSeqA += "-";
				totalGapr++;
				mAlignmentSeqB += mSeqB.charAt(j - 1);
				j--;
				continue;
			}
		}
		int diff = j;
		while(j>0){
			mAlignmentSeqA += "-";
			totalGapr++;
			mAlignmentSeqB += mSeqB.charAt(j - 1);
			j--;
		}
		while(i>0){
			mAlignmentSeqA += mSeqA.charAt(i-1);
			mAlignmentSeqB += "-";
			totalGapfa++;
			i--;
		}
		mAlignmentSeqA = reverse(mAlignmentSeqA);
		mAlignmentSeqB = reverse(mAlignmentSeqB);
		return diff;
//		produceCigar();
	}
	
	public final int Full(){
		int maxGap = (int)(mSeqA.length()*0.05)+1;
		maxGap = Math.min(20, maxGap);
		int Gap = 0;
		int Gapfa = 0;
		int Gapr = 0;
		int Score = 0;
		int Mismatch = 0;
		cigar = "";
		realCigar = "";
		String A = mSeqA;
		String B = mSeqB;
		StringBuffer mAlA = new StringBuffer();
		StringBuffer mAlB = new StringBuffer();
		
		//first
		for(int i = 0 ; i < 1 ; i++){
    		mAlignmentSeqA = "";
	        mAlignmentSeqB = "";
	        totalGapfa = 0;
	        totalGapr = 0;
	        totalGap = 0;
	        totalMismatch = 0;
	        mScore = 0;
	        process(A,B,maxGap);
	        Gap+=totalGap;
	        Score+=mScore;
	        Mismatch+=totalMismatch;
	        Gapfa += totalGapfa;
	        Gapr += totalGapr;
	        mAlA.append(mAlignmentSeqA);
	        mAlB.append(mAlignmentSeqB);//.substring(mAlignmentSeqA.length());
		}
		
		totalGap = Gap;
		mScore = Score;
		totalMismatch = Mismatch;
		totalGapfa = Gapfa;
		totalGapr = Gapr;
		int diff = produceCigar(mAlB.toString(), mAlA.toString());
		return diff;
	}
	public final int DQ(int minL) {
		int maxGap = (int)(minL*0.2)+1;
//		int maxGap = (int)(minL*mxg)+1;
		int Gap = 0;
		int Gapfa = 0;
		int Gapr = 0;
		int Score = 0;
		int Mismatch = 0;
		//OverLap
		int OL = 5;
		cigar = "";
		realCigar = "";
		String A = mSeqA;
		String B = mSeqB;
		StringBuffer mAlA = new StringBuffer();
		StringBuffer mAlB = new StringBuffer();
//		System.out.println(A.length());
		int Iter = A.length()/minL;
		int mod = A.length()%minL;
		//first
		for(int i = 0 ; i < 1 ; i++){
			String a = "";
    		String b = "";
    		mAlignmentSeqA = "";
	        mAlignmentSeqB = "";
	        totalGapfa = 0;
	        totalGapr = 0;
	        totalGap = 0;
	        totalMismatch = 0;
	        mScore = 0;
    		int diff = Gapr - Gapfa;
    		int JEnd = minL*5;
    		if(i==Iter-1) JEnd+=mod;
    		JEnd = Math.min(JEnd, A.length());
    		for(int j = 0 ; j < JEnd ; j++){
    			a+=A.charAt(i*minL+j);
    			b+=B.charAt(i*minL+j+diff);
    		}
    		JEnd = Math.min(maxGap*4, B.length()-minL);
    		for(int j = 1 ; j < JEnd ; j++){
    			b+=B.charAt(i*minL+j+minL);
    		}

	        process(a,b,maxGap*4*5);
	        Gap+=totalGap;
	        Score+=mScore;
	        Mismatch+=totalMismatch;
	        Gapfa += totalGapfa;
	        Gapr += totalGapr;
	        mAlA.append(mAlignmentSeqA);
	        mAlB.append(mAlignmentSeqB);//.substring(mAlignmentSeqA.length());
		}
		
		//second to end
		for(int i = 5 ; i < Iter ; i++){
			String a = "";
    		String b = "";
    		mAlignmentSeqA = "";
	        mAlignmentSeqB = "";
	        totalGapfa = 0;
	        totalGapr = 0;
	        totalGap = 0;
	        totalMismatch = 0;
	        mScore = 0;
    		int diff = Gapr - Gapfa;
    		int JEnd = minL;
    		if(i==Iter-1) JEnd+=mod;
    		JEnd = Math.min(JEnd, A.length()-i*minL);
    		for(int j = -1*OL ; j < JEnd ; j++){
    			a+=A.charAt(i*minL+j);
    			if(i*minL+j+diff<0){
    				System.out.println(diff);
    			}
    			b+=B.charAt(i*minL+j+diff);
    		}
    		JEnd = Math.min(maxGap, B.length()-i*minL-minL);
    		for(int j = 1 ; j < JEnd ; j++){
    			b+=B.charAt(i*minL+j+minL);
    		}
//    		LocalAligner la = new LocalAligner(a, b, -8, -6, 2, (int) (0.1 * minL), 2 * minL);
	        process(a,b,-1);
	        Gap+=totalGap;
	        Score+=mScore;
	        Mismatch+=totalMismatch;
	        Gapfa += totalGapfa;
	        Gapr += totalGapr;
//	        if(i!=Iter-1){
//	        	mAlignmentSeqA = mAlignmentSeqA.substring(0, mAlignmentSeqA.length()-OL);
//	        	mAlignmentSeqB = mAlignmentSeqB.substring(0, mAlignmentSeqB.length()-OL);
//	        }
	        for(int z = 0 ; z < OL ; z++){
	        	if(mAlignmentSeqA.charAt(z)=='-' ){
	        		if(mAlA.charAt(mAlA.length()-(OL-z))=='-'){
//	        			System.out.println("found");
	        			Gapr--;
	        		}
//	        		mAlA.setCharAt(mAlA.length()-(OL-z), '-');
	        		mAlA.insert(mAlA.length()-(OL-z), '-');
	        		mAlA.deleteCharAt(mAlA.length()-1);
	        	}
	        	if(mAlignmentSeqB.charAt(z)=='-'){
	        		if(mAlB.charAt(mAlB.length()-(OL-z))=='-') {
//	        			System.out.println("found");
	        			Gapfa--;
	        		}
//	        		mAlB.setCharAt(mAlB.length()-(OL-z), '-');
	        		mAlB.insert(mAlB.length()-(OL-z), '-');
	        		mAlB.deleteCharAt(mAlB.length()-1);
	        	}
	        }
	        mAlignmentSeqA = mAlignmentSeqA.substring(OL);
	        mAlignmentSeqB = mAlignmentSeqB.substring(OL);
	        mAlA.append(mAlignmentSeqA);
	        mAlB.append(mAlignmentSeqB);//.substring(mAlignmentSeqA.length());
		}
		totalGap = Gap;
		mScore = Score;
		totalMismatch = Mismatch;
		totalGapfa = Gapfa;
		totalGapr = Gapr;
		int diff = produceCigar(mAlB.toString(), mAlA.toString());
		return diff;
		
	}
	public final void process(String mSeqA, String mSeqB , int MG) {
		mD = new int[mSeqA.length() + 1][mSeqB.length() + 1];
		int scoreDiag = 0;
		int scoreLeft = 0;
		int scoreUp = 0;
		int maxGap = (int)(0.2*mSeqA.length())+1;
		if(MG>0) maxGap = MG;
//		if(MG>0) maxGap*=4;
		int I = 0;
		int J = maxGap + 1;
		while(J<=mSeqB.length() && I<=mSeqA.length()){
			mD[I][J]=NegativeInf;
			J++;
			I++;
		}
		J=0;
		I=maxGap + 1;
		while(J<=mSeqB.length() && I<=mSeqA.length()){
			mD[I][J]=NegativeInf;
			J++;
			I++;
		}
		for(int i = 1 ; i <= mSeqA.length() ; i++){
			int s = Math.max(1, i-maxGap);
			int e = Math.min(i+maxGap, mSeqB.length());
			for(int j = s ; j <= e ; j++){
//				scoreDiag = mD[i-1][j-1] + weight(i, j);
				int weight = ((mSeqA.charAt(i - 1) == mSeqB.charAt(j - 1)) ? MATCH:MISMATCH);
				scoreDiag = mD[i-1][j-1] + weight;
				scoreLeft = mD[i][j-1] + GAP;
				scoreUp = mD[i-1][j] + GAP;
				mD[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
			}
		}
		backtrack(maxGap,mSeqA,mSeqB);
		this.totalGap=this.totalGapfa+this.totalGapr;
	}

	public final void backtrack(int maxGap, String mSeqA, String mSeqB) {

		int i = mSeqA.length();// - shift;
		int max = i * GAP;
		int index = 0;
//		int flag = 0;
//		for(int z = 0 ; z <= mSeqA.length() ; z++){
		int s = Math.max(1, i-maxGap);
		int e = Math.min(i+maxGap, mSeqB.length());
		for(int k = s ; k <= e ; k++){
//		for (int k = shift; k <= this.mSeqB.length(); k++) {
			if (mD[i][k] > max) {
				max = mD[i][k];
				index = k;
			}
//			if (mD[z][k] > max) {
//				max = mD[z][k];
//				index = k;
//				i = z;
//			}
		}
		int j = index;
//		i=mSeqA.length();
//		j=i;
//		j=mSeqB.length();
		this.mScore = mD[i][j];
		this.cigar = "";
		this.realCigar = "";
		while (i > 0 && j > 0) {
//			if (mD[i][j]==0 || mD[i][j]==NegativeInf) break;
			int weight = ((mSeqA.charAt(i - 1) == mSeqB.charAt(j - 1)) ? MATCH:MISMATCH);
			if (mD[i][j] == mD[i - 1][j] + GAP) {
				mAlignmentSeqA += mSeqA.charAt(i-1);
				mAlignmentSeqB += "-";
				totalGapfa++;
				i--;
				continue;
			} else if (mD[i][j] == mD[i - 1][j - 1] + weight) // MATCH-MISMATCH
			{
				mAlignmentSeqA += mSeqA.charAt(i-1);
				mAlignmentSeqB += mSeqB.charAt(j-1);
				if (weight == MISMATCH)
					totalMismatch++;
				i--;
				j--;
				continue;
			} else {
				mAlignmentSeqA += "-";
				totalGapr++;
				mAlignmentSeqB += mSeqB.charAt(j - 1);
				j--;
				continue;
			}
		}
		while(j>0){
			mAlignmentSeqA += "-";
			totalGapr++;
			mAlignmentSeqB += mSeqB.charAt(j - 1);
			j--;
		}
		while(i>0){
			mAlignmentSeqA += mSeqA.charAt(i-1);
			mAlignmentSeqB += "-";
			totalGapfa++;
			i--;
		}
		mAlignmentSeqA = reverse(mAlignmentSeqA);
		mAlignmentSeqB = reverse(mAlignmentSeqB);
//		produceCigar();
	}

	public final int produceCigar(String mAlignmentSeqA, String mAlignmentSeqB) {
//		String temp;
//		temp = mAlignmentSeqA;
//		mAlignmentSeqA = mAlignmentSeqB;
//		mAlignmentSeqB = temp;
		int X=0;
		while(mAlignmentSeqA.charAt(X++)=='-');
		int Y=0;
		while(mAlignmentSeqB.charAt(Y++)=='-');
		int max = Math.max(X,Y);
		mAlignmentSeqA = mAlignmentSeqA.substring(max);
		mAlignmentSeqB = mAlignmentSeqB.substring(max);
		int out = Y-X;
		
		int counter = 0;
		int realCounter = 0;
		cigar = "";
		realCigar = "";
		int gapCount = 0;
		int Icounter = 0;
		int Dcounter = 0;
		for (int i = 0; i < mAlignmentSeqA.length(); i++) {
			if (mAlignmentSeqA.charAt(i) == mAlignmentSeqB.charAt(i)) {
				gapCount = 0;
				counter++;
				if (Icounter != 0) {
					realCigar += Icounter;
					realCigar += "I";
				}
				if (Dcounter != 0) {
					realCigar += Dcounter;
					realCigar += "D";
				}
				Icounter = 0;
				Dcounter = 0;
				realCounter++;
			} else if (mAlignmentSeqA.charAt(i) != mAlignmentSeqB.charAt(i) && mAlignmentSeqA.charAt(i) != '-'
					&& mAlignmentSeqB.charAt(i) != '-') {
				gapCount = 0;
				if (Icounter != 0) {
					realCigar += Icounter;
					realCigar += "I";
				}
				if (Dcounter != 0) {
					realCigar += Dcounter;
					realCigar += "D";
				}
				if (counter != 0) {
					cigar += counter;
				}
				Icounter = 0;
				Dcounter = 0;
				counter = 0;
				cigar += mAlignmentSeqA.charAt(i);
				realCounter++;
			} else if (mAlignmentSeqA.charAt(i) == '-' && mAlignmentSeqB.charAt(i) != '-') {
				gapCount++;
				Icounter++;
				if (counter != 0) {
					cigar += counter;
				}
				if (gapCount == 1)
					cigar += "^";
				cigar += mAlignmentSeqB.charAt(i);
				counter = 0;

				if (realCounter != 0) {
					realCigar += realCounter;
					realCigar += "M";
				}
				realCounter = 0;

				if (Dcounter != 0) {
					realCigar += Dcounter;
					realCigar += "D";
				}
				Dcounter = 0;
			} else if (mAlignmentSeqA.charAt(i) != '-' && mAlignmentSeqB.charAt(i) == '-') {
				gapCount = 0;
				Dcounter++;
				if (realCounter != 0) {
					realCigar += realCounter;
					realCigar += "M";
				}
				realCounter = 0;
				if (Icounter != 0) {
					realCigar += Icounter;
					realCigar += "I";
				}
				Icounter = 0;
			}

		}
		if (counter != 0) {
			cigar += counter;
		}
		realCounter++;
		if (realCounter != 0) {
			realCigar += realCounter;
			realCigar += "M";
		}
		if (Dcounter != 0) {
			realCigar += Dcounter;
			realCigar += "D";
		}
		if (Icounter != 0) {
			realCigar += Icounter;
			realCigar += "I";
		}
		return out;
	}


	public static String reverse(String In) {
		String Out = "";
		char c[] = In.toCharArray();
		for (int i = In.length() - 1; i > -1; i--) {
			Out += c[i];
		}
		return Out;
	}
	
//	public final void Print() {
//	for (int i = 0; i < this.mSeqA.length(); i++) {
//		for (int j = 0; j < this.mSeqB.length(); j++) {
//			System.out.print(mD[i][j]);
//			System.out.print("\t");
//		}
//		System.out.print("\n");
//	}
//}

//public void dispose() {
//	for (int i = 0; i <= this.mSeqA.length(); i++)
//		this.mD[i] = null;
//	this.mD = null;
//}
}

